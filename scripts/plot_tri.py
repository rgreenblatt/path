from mayavi import mlab
import numpy as np


def draw_tri(vertices, color=(0, 0, 0)):
    mlab.triangular_mesh(vertices[:, 0],
                         vertices[:, 1],
                         vertices[:, 2], [[0, 1, 2]],
                         color=color)


def plot_points(points, color=(0, 0, 0), scale_factor=0.1):
    points = np.array(points)
    mlab.points3d(points[:, 0],
                  points[:, 1],
                  points[:, 2],
                  scale_factor=scale_factor,
                  color=color)


def draw_centroid(tri, color=(0, 0, 0)):
    plot_points(tri.mean(axis=0, keepdims=True), color=color)


def draw_region(tri, region, color=(0, 0, 0)):
    if region is None:
        return
    if region == 'all':
        points = tri
    else:
        region = np.array(region)
        v0 = tri[1] - tri[0]
        v1 = tri[2] - tri[0]

        points = (v0[None, :] * region[:, 0, None] +
                  v1[None, :] * region[:, 1, None] + tri[0])

    plot_points(points, color=color, scale_factor=0.05)


def draw_vec(origin, dir, color=(0, 0, 0)):
    mlab.quiver3d(origin[0],
                  origin[1],
                  origin[2],
                  dir[0],
                  dir[1],
                  dir[2],
                  color=color)


def connect_tris(vertices_first, vertices_second, color=(0, 0, 0)):
    for i in range(3):
        for j in range(3):
            mlab.plot3d(*[[vertices_first[i][k], vertices_second[j][k]]
                          for k in range(3)],
                        color=color)


def main():

    triangle_onto = [
        [-0.62911369091897895, 1.0069545380288434, -5.8840110060719675E-17],
        [-0.032948638103039163, -1.0069545380288432, 2.8088471498575108E-16],
        [0.66206232902201834, -5.5511151231257827E-17, 2.4651903288156619E-32],
    ]

    triangle_blocking = [
        [-2.0234384503638014, -1.2143174976544011, 0.29480044773744984],
        [-3.129121264619906, -1.4282808991545024, 0.70285452726176134],
        [-2.6013046194058496, -0.62913667157644415, 2.2769323633412162],
    ]

    triangle_light = [
        [-0.27991549056523884, -1.7422132549211919, 0.29541078130022963],
        [-2.4006344482611395, -1.2577692084973018, 0.99524091779543022],
        [-0.40020867787369074, -1.2272179948037507, 0.38061494943204338],
    ]

    triangle_onto = np.array(triangle_onto)
    triangle_blocking = np.array(triangle_blocking)
    triangle_light = np.array(triangle_light)

    region = [
        [0, 0.14450124715971735],
        [0.14442120289266924, 0],
        [0, 0],
        [0, 0.14450124715971735],
    ]

    mlab.figure(fgcolor=(0, 0, 0), bgcolor=(1, 1, 1))

    draw_tri(triangle_onto, color=(0, 0, 1))
    draw_tri(triangle_blocking, color=(0, 0, 0))
    draw_tri(triangle_light, color=(1, 0, 0))

    draw_region(triangle_onto, region, color=(0, 0, 1))

    # plot_points(
    #     [[-2.4006344482611395, -1.2577692084973018, 0.99524091779543022]])

    from_points = [
        [-0.62911369091897895, 1.0069545380288434, -5.8840110060719675E-17],
    ]

    to_points = [
        [-2.2177193090801608, -1.0175774227279843, 0.96120092466964624],
        [-2.9699466233812473, -1.1872814974188957, 1.1775520895905505],
        [-3.129121264619906, -1.4282808991545024, 0.70285452726176134],
        [-2.0234384503638014, -1.2143174976544011, 0.29480044773744984],
    ]

    # plot_points([triangle_light[1]])
    # plot_points([from_points[0]])
    # plot_points(to_points)

    intersect = np.array([
        [-2.2177193090801608, -1.0175774227279841, 0.96120092466964624],
        [-2.9699466233812464, -1.1872814974188948, 1.17755208959055],
        [-11.037154793809991, -9.1314269581118346, 2.926126658994102],
        [-13.450235847249202, -19.418129302033449, 2.7107548127364809],
        [-2.2177193090801608, -1.0175774227279841, 0.96120092466964624],
    ])
    # mlab.plot3d(intersect[:, 0],
    #             intersect[:, 1],
    #             intersect[:, 2],
    #             color=(1, 1, 0))
    region = [
        [0.88094045477386151, 0.57839265075202639],
        [1.2753825713623359, -0.12217536932792397],
        [6.2180996798738004, -20.197341371265829],
        [8.6169600692899841, -42.428256613409125],
        [1.2753825713623366, -0.12217536932792661],
        [0.88094045477386085, 0.57839265075202828],
        [1.2753825713623361, -0.12217536932792586],
        [0.88094045477386207, 0.57839265075202562],
        [7.5201273416141863, -13.907897727769321],
        [8.1040336311560264, -15.02186471861315],
        [29.58855321912111, -71.190208723490542],
        [50.454045080412726, -133.71415839504144],
        [8.1040336311560282, -15.021864718613154],
        [7.5201273416141863, -13.907897727769321],
        [8.1040336311560264, -15.021864718613152],
        [7.5201273416141863, -13.907897727769321],
        [7.2312607322193401, -14.036833786874505],
        [7.8069235615038232, -15.154480258988949],
        [28.571720316392721, -71.644073666624479],
        [48.633741314287164, -134.52665380415169],
        [7.8069235615038242, -15.154480258988952],
        [7.2312607322193401, -14.036833786874503],
        [7.8069235615038242, -15.154480258988951],
        [7.231260732219341, -14.036833786874505],
        [10.406741449928653, -12.196212112211905],
        [11.07302378400561, -13.261332293192533],
        [39.749659097585827, -65.164942401876218],
        [68.64415207728527, -122.92790733283152],
        [11.07302378400561, -13.261332293192536],
        [10.406741449928653, -12.196212112211903],
        [11.07302378400561, -13.261332293192535],
        [10.406741449928653, -12.196212112211905],
        [11.40090480735797, -11.390807885189894],
        [12.095557835242211, -12.432944039908461],
        [43.249191337185323, -62.329856963139719],
        [74.908909736413036, -117.85262240885589],
        [12.095557835242211, -12.432944039908465],
        [11.400904807357968, -11.390807885189894],
        [12.095557835242211, -12.432944039908463],
        [11.40090480735797, -11.390807885189894],
        [5.4325626544035472, -14.692957872403117],
        [5.9568955769517613, -15.829328325230602],
        [22.240163368952565, -73.953681411997834],
        [37.299177959837607, -138.66124432133017],
        [5.9568955769517622, -15.829328325230605],
        [5.4325626544035481, -14.692957872403117],
        [5.9568955769517622, -15.829328325230604],
        [5.4325626544035481, -14.692957872403117],
        [6.060020561367887, -14.491728141687387],
        [6.6022594105652939, -15.62235605026156],
        [24.448863939139741, -73.245337129397683],
        [41.253127478354827, -137.39318763092331],
        [6.6022594105652948, -15.622356050261564],
        [6.0600205613678879, -14.491728141687386],
        [6.6022594105652939, -15.622356050261562],
        [6.0600205613678879, -14.491728141687387],
        [4.0968615626882077, -15.028953788566339],
        [4.5830772418197068, -16.174912642723172],
        [17.538391775788192, -75.136413135310789],
        [28.882207466913428, -140.77853518051259],
        [4.5830772418197068, -16.174912642723175],
        [4.0968615626882077, -15.028953788566337],
        [4.5830772418197068, -16.174912642723175],
        [4.0968615626882086, -15.028953788566339],
        [4.2462192417696949, -14.997431890344622],
        [4.7366971791601822, -16.142491196035913],
        [18.064142407484127, -75.025453605112943],
        [29.823390479728115, -140.57989875739457],
        [4.7366971791601831, -16.142491196035916],
        [4.2462192417696949, -14.997431890344622],
        [4.7366971791601831, -16.142491196035916],
        [4.2462192417696958, -14.997431890344622],
    ]

    # draw_region(triangle_light, region, color=(0, 1, 1))

    baryo_points = [
        [0.88094045477386151, 0.57839265075202639],
        # [1.2753825713623359, -0.12217536932792397],
        # [6.2180996798738004, -20.197341371265829],
        [8.6169600692899841, -42.428256613409125],
    ]
    draw_region(triangle_light, baryo_points, color=(0, 1, 1))
    # plot_points([triangle_light[1]])

    # draw_centroid(triangle_light, color=(0, 0, 0))
    # draw_centroid(triangle_onto, color=(0, 0, 0))

    # draw_region(triangle_onto, onto_region, color=(0, 0, 1))
    # draw_region(triangle_blocking, blocking_region, color=(0, 0, 0))
    # draw_region(triangle_light, light_region, color=(1, 0, 0))

    # draw_region(triangle_onto, onto_centroid_shadow, color=(0, 0, 0))
    # draw_region(triangle_onto, onto_some_blocking, color=(1, 0, 0))
    # draw_region(triangle_onto, onto_totally_blocked, color=(0, 1, 0))
    # draw_region(triangle_onto, onto_from_each_point_0, color=(0, 0, 0))
    # draw_region(triangle_onto, onto_from_each_point_1, color=(0, 0, 0))
    # draw_region(triangle_onto, onto_from_each_point_2, color=(0, 0, 0))

    # draw_region(triangle_light, onto_light_centroid_shadow, color=(0, 0, 0))
    # draw_region(triangle_light, onto_light_some_blocking, color=(1, 0, 0))
    # draw_region(triangle_light, onto_light_totally_blocked, color=(0, 1, 0))
    # draw_region(triangle_light, onto_light_from_each_point_0, color=(0, 0, 0))
    # draw_region(triangle_light, onto_light_from_each_point_1, color=(0, 0, 0))
    # draw_region(triangle_light, onto_light_from_each_point_2, color=(0, 0, 0))

    # connect_tris(triangle_0, triangle_1, color=(1, 1, 0))

    mlab.show()


if __name__ == "__main__":
    main()
