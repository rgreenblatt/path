#!/usr/bin/env python3

import argparse
import os
from contextlib import suppress

from cmake_cli.base_cmake_builder import BaseCMakeBuilder


class PathCMakeBuild(BaseCMakeBuilder):
    def build_default_command_parser_impl(self,
                                     parser,
                                     has_build_benchmarks=True,
                                     build_benchmarks_default=False,
                                     skip_gen=False,
                                     skip_build=False,
                                     **kwargs):
        super().build_default_command_parser_impl(parser,
                                             skip_gen=skip_gen,
                                             skip_build=skip_build,
                                             **kwargs)
        if not skip_gen:
            parser.add_argument('--cpu-only',
                                dest='cpu_only',
                                action='store_true',
                                help='only build for the cpu -- GROSS AND HACKY')
            parser.add_argument('--no-cpu-only',
                                dest='cpu_only',
                                action='store_false',
                                help='build for the cpu and gpu')
            parser.add_argument('--cuda-archs',
                                 default='75',
                                 help='cuda architectures (sm_*)')
            parser.add_argument('--cxx-compiler', default='clang++')
            if has_build_benchmarks:
                parser.add_argument('--build-benchmarks',
                                    default=build_benchmarks_default,
                                    dest='build_benchmarks',
                                    action='store_true')
                parser.add_argument('--no-build-benchmarks',
                                    dest='build_benchmarks',
                                    action='store_false')
        if not skip_build:
            parser.add_argument('-l',
                                '--lolcat',
                                action='store_true',
                                help='lolcat output')

        return parser

    def extend_directory(self):
        running = ""
        if self.args.cpu_only:
            running += "_cpu_only"
        if self.args.cxx_compiler == "g++" or self.args.cxx_compiler == "gcc":
            running += "_gnu"
        return running

    def extend_piped_commands(self):
        out = []
        with suppress(AttributeError):
            if self.args.lolcat:
                if self.exists_in_path_warn("lolcat"):
                    out.append(["lolcat", "--force"])

        return out

    def extend_gen_cmd(self):
        out = [
            "-DCMAKE_CXX_COMPILER=" + self.args.cxx_compiler,
            "-DCMAKE_CUDA_COMPILER=clang++",
            "-DCMAKE_CUDA_ARCHITECTURES=" + self.args.cuda_archs
        ]
        if self.args.cpu_only:
            print("WARN: building CPU_ONLY which is very hacky...")
            out += ["-DCPU_ONLY=ON"]
        if self.args.build_benchmarks:
            out += ["-DBUILD_BENCHMARKS=ON", "-DBENCHMARK_ENABLE_TESTING=OFF"]

        return out

    def test_add_args(self, parser):
        parser.description = 'run all tests',
        self.build_default_command_parser(parser,
                                          has_build_testing=False,
                                          has_build_benchmarks=False)

    def test_command(self):
        self.args.build_testing = True
        self.build(self.get_directory(),
                   additional_build_args=["--target", "run_build_tests"])

    def gen_run_add_args(self, parser, name_type, release_default,
                        **kwargs):
        parser.description = 'run {}'.format(name_type)
        self.build_default_command_parser(
            parser,
            release_default=release_default,
            **kwargs)
        parser.add_argument('executable', help='{} to run'.format(name_type))
        parser.add_argument('executable_args', nargs=argparse.REMAINDER)

    def gen_run_command(self):
        directory = self.get_directory()
        self.build(directory,
                   additional_build_args=["--target", self.args.executable])
        self.runner([os.path.join(directory, self.args.executable)] +
                    self.args.executable_args)

    def run_add_args(self, parser):
        self.gen_run_add_args(parser, 'executable', False)

    def run_command(self):
        self.gen_run_command()

    def bench_add_args(self, parser):
        self.gen_run_add_args(parser,
                              'benchmark',
                              True,
                              has_build_testing=False,
                              has_build_benchmarks=False)

    def bench_command(self):
        self.args.build_benchmarks = True
        self.gen_run_command()

    def check_add_args(self, parser):
        parser.description = 'check (syntax only) project'
        self.build_default_command_parser(parser,
                                          build_testing_default=True,
                                          build_benchmarks_default=True,
                                          has_release=False,
                                          has_ccache=False)
        parser.add_argument('--target', help='cmake target')

    def check_command(self):
        self.args.ccache = False
        additional_build_args = None
        if self.args.target is not None:
            additional_build_args = ["--target", self.args.target]
        self.build(self.get_directory(forced_base="check"),
                   additional_gen_args=["-DSYNTAX_ONLY=ON"],
                   additional_build_args=additional_build_args)

    def extend_commands(self, commands):
        commands.update({
            "test": (self.test_add_args, self.test_command),
            "bench": (self.bench_add_args, self.bench_command),
            "check": (self.check_add_args, self.check_command),
            "run": (self.run_add_args, self.run_command),
        })

    @staticmethod
    def ccache_default():
        return True


if __name__ == "__main__":
    PathCMakeBuild().run_with_cli_args()
